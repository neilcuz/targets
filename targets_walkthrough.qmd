---
title: "Introduction to the targets package in R"
format: gfm
editor: visual
---

This notebook contains the code underpinning the *Targets* Twitter thread.

- Check out the Shoogle blog for more R and data science content [Shoogle Blog](https://www.shoogle.co/blog)

-   Follow me on Twitter for threads on data and coding @neilgcurrie [twitter.com/neilgcurrie](www.twitter.com/neilgcurrie)

You can find code and links to all my threads [here](https://github.com/neilcuz/threads).

## Setup the targets package

First we need to install and load the targets package.

```{r}
#| output: false

if (!require(targets)) install.packages("targets")

library(targets)

```

Now we need to initialise the _targets.R file. This controls the pipeline. Luckily we can do it with a one-liner.

```{r}
use_targets()
```
## An example pipeline

Load libraries required for inside the pipeline

```{r}
#| output: false

library(tidyverse)
library(here)
```

Generate some fake data for the pipeline. `a` we will save as a CSV file and `b` as an rds file.

```{r}
# Create dataset A

stores <- c("glasgow", "oslo", "philadelphia", "montreal", "osaka", "seoul")

file_a <- file.path(here(), "dataset_a.csv")

stores |> 
  tibble(store = _,
         sales = c(runif(5, 50000, 100000), NA_real_)) |> 
  write_csv(file_a)
  
# Create dataset B

file_b <- file.path(here(), "dataset_b.rds")

tibble(region = rep(c("EUROPE", "NORTH AMERICA", "ASIA"), each = 2),
       store = str_to_sentence(stores),
       years_open = round(runif(6, 1, 15))) |> 
  write_rds(file_b)
```

We create some functions and save them in `functions.R`. These can viewed [here]() in their original script and can also be seen in the code chunk below.

We can use read_csv and read_rds to read in the files so we don't need to define
new functions here.

Now we edit the [_targets.R]() file directly which you can see [here]().

## Inspect the pipeline

`tar_manifest` gives a handy table detailing the pipeline

```{r}
#| output: false

tar_manifest()
```

`tar_visnetwork` gives you a plot of the pipeline. You will need to install `visNetwork` but a prompt comes up so I've omitted. I've omitted the plot for GitHub because rendering was a little complicated.

```{r}
#| eval: false
tar_visnetwork()
```

## Run the pipeline

If running for the first time then the whole pipeline will be ran.

```{r}
tar_make()
```

What happens though when we update dataset `a` only.

```{r}
stores |> 
  tibble(store = _,
         sales = c(runif(5, 50000, 100000), NA_real_)) |> 
  write_csv(file_a)
```


Re-run the pipeline. Notice that reading in and cleaning file b have both been skipped because there were no changes. If a run takes a while that could be a good time saving.

```{r}
tar_make()
```





